Below is the define data memers in the "SnapshotSynthesizer" class: 

	1) First, "snapshot_md_updates_" of the "MDPMarketUpdateLFQueue" type, which is what "MarketDataPublisher" uses to publish incremental "MDPMarketUpdates" to this component. 

	2) It also has a "snapshot_socket_" variable, which is an "McastSocket" to be used to publish snapshot market data updates to the snapshot multicast stream. 

	3) One of the most important data members in the "ticker_orders_" variable, which is a "std::array" of size "ME_MAX_TICKERS" to represent the snapshot of the book for each trading instrument. Each element of this array is a "std::array" of "MEMarketUpdate" pointers and a maximum size of "ME_MAX_ORDER_IDS" to represent a hash map from "OrderId" to the order corresponding to that "OrderId". We use the first "std::array" as a has map from "TickerId" to the snapshot f the limit order book. The second "std::array" is also a hash map from "OrderId" to the order information. We will also have an "order_pool_" data member of the "MemPool" type of "MEMarketUpdate" objects. This memory pool is what we will use to allocate and deallocate "MEMarketUpdate" objects from as we update the order book snapshot in the "ticker_orders_" container. 

	4) We have two variables to track information about the last incremental market data update that "SnapshotSynthesizer" has processed. The first one is the "last_inc_seq_num_" variable to track the sequence number on the last incremental "MDPMarketUpdate" it has received. The second one is the "last_snapshot_time_" variable used to track when the last snapshot was published over UDP since this component will only periodically publish the full snapshot of all the books. 

	5) There is also a Boolean "run_" variable, which serves a similar purpose as the "run_" variables in the "OrderServer" and "MarketDataPublisher" components we built before. This will be used to start and stop the "SnapshotSynthesizer" thread and will be markd "volatile" since it will be accessed from multiple threads. 
