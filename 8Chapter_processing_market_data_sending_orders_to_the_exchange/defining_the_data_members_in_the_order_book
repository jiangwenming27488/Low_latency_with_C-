To build the "MarketOrderBook" class, we first need to define the data members in this class. 
The important data members in this class are the following: 

	1) A "trade_engine_" variable of the "TradeEngine" pointer type. It represents the class that is the trading engine framework. We will communicate changes to the order book using this variable. 

	2) Two memory pools, "order_pool_" for "MarketOrder" objects and "orders_at_price_pool_" for "MarketOrdersAtPrice" objects, are to be used to allocate and deallocate these objects as needed. The first pool, "order_pool_", is used to allocate and deallocate "MarketOrder" objects. The second pool, "orders_at_price_pool", is used to allocate and deallocate "MarketOrdersAtPrice" objects. Remember that a single "MemPool" instance is tied to a specific object type provided to it as a template parameter. 

	3) A "bbo_" variable of the "BBO" type, which will be used to compute and maintain a "BBO"-view of the order book when there are updates and provided to any components that require it. 

	4) An "oid_to_order_" variable of the "OrderHashMap" type will be used to track "MarketOrder" objects by "OrderId". 

	5) A "price_orders_at_price_" variable of the "OrdersAtPriceHashMap" type to track "OrdersAtPrice" objects by "Price". 

	6) Two pointers to "MarketOrdersAtPrie" - "bids_by_price_" to represent the doubly linked list of bids sorted by price and "asks_by_price_" to represent the doubly linked list of asks sorted by price. 

	7) Last, some variables such as "ticker_id_", "time_str_", and "logger_" for leggings purposes. 


We will also define a "MarketOrderBookHashMap" type, which is just a has map from "TickerId" to "MarketOrderBook" objects of the "ME_MAX_TICKERS" size. 


