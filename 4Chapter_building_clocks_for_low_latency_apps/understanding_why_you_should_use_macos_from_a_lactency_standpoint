Most low latency applications run on modern pipelined processors that pre-fetch instructions and data before they need to be executed. 
We discussed in the previous chapter that branch mispredictions are extremely expensive and stall the pipeline, introducing bubles into it. 
Therefore, an important development practice for low latency applications is to have fewer branches. 
Since branches are unavoidaboe, it is alos important to try and make them as predictable as possible. 

We have two simple macros that we will use to provide branching hints to the compiler. 
These use the "__bultin_expect" GCC built-in fuction that reorders the machine instructions generated by the compiler. 
Effectively, the compiler uses the branch prediction hints provided by the developer to generate machine code that is optimized under the assumption that a branch is more or less likely to be taken. 

Note that instructions reordering is only part of the full picture when it comes to branch predictions, since there is a hardware branch predictor that the processor uses when running instructions. 
Not that modern hardware branch predictors are extreely good at predicting branches and jumps, especially in cases where the same branch gets taken many times and even when there are at least easily predictable branching patterns. 
